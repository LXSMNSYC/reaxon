// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var SafeMaybeObserver$Reaxon = require("../../Observers/SafeMaybeObserver.bs.js");

function operator(reducer, starter, source) {
  return /* record */[/* subscribeWith */(function (obs) {
              var current = /* record */[/* contents */starter];
              var safe = SafeMaybeObserver$Reaxon.make(obs);
              return Curry._1(source[/* subscribeWith */0], /* record */[
                          /* onSubscribe */(function (sub) {
                              return Curry._1(safe[/* onSubscribe */0], sub);
                            }),
                          /* onComplete */(function (param) {
                              var match = current[0];
                              if (match !== undefined) {
                                return Curry._1(safe[/* onSuccess */2], Caml_option.valFromOption(match));
                              } else {
                                return Curry._1(safe[/* onComplete */1], /* () */0);
                              }
                            }),
                          /* onError */(function (x) {
                              return Curry._1(safe[/* onError */3], x);
                            }),
                          /* onNext */(function (x) {
                              var match = current[0];
                              var tmp;
                              if (match !== undefined) {
                                var exit = 0;
                                var value;
                                try {
                                  value = Curry._2(reducer, Caml_option.valFromOption(match), x);
                                  exit = 1;
                                }
                                catch (raw_e){
                                  var e = Caml_js_exceptions.internalToOCamlException(raw_e);
                                  Curry._1(safe[/* onError */3], e);
                                  tmp = undefined;
                                }
                                if (exit === 1) {
                                  tmp = Caml_option.some(value);
                                }
                                
                              } else {
                                tmp = Caml_option.some(x);
                              }
                              current[0] = tmp;
                              return /* () */0;
                            })
                        ]);
            })];
}

exports.operator = operator;
/* No side effect */
