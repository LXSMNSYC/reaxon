// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Exceptions$Reaxon = require("../../Exceptions.bs.js");

function operator(source) {
  return {
          subscribeWith: (function (obs) {
              var subscribed = {
                contents: false
              };
              var finished = {
                contents: false
              };
              var subRef = {
                contents: undefined
              };
              var subscription = {
                cancel: (function (param) {
                    if (finished.contents) {
                      return 0;
                    } else {
                      if (subscribed.contents) {
                        var match = subRef.contents;
                        if (match !== undefined) {
                          Curry._1(match.cancel, /* () */0);
                        }
                        
                      }
                      finished.contents = true;
                      return /* () */0;
                    }
                  })
              };
              var last = {
                contents: undefined
              };
              var single = {
                contents: false
              };
              var observer_onSubscribe = function (sub) {
                if (finished.contents || subscribed.contents) {
                  return Curry._1(sub.cancel, /* () */0);
                } else {
                  subscribed.contents = true;
                  subRef.contents = sub;
                  return /* () */0;
                }
              };
              var observer_onComplete = function (param) {
                if (!finished.contents && subscribed.contents) {
                  if (single.contents) {
                    var match = last.contents;
                    if (match !== undefined) {
                      Curry._1(obs.onSuccess, Caml_option.valFromOption(match));
                    } else {
                      Curry._1(obs.onComplete, /* () */0);
                    }
                  } else {
                    Curry._1(obs.onComplete, /* () */0);
                  }
                  return Curry._1(subscription.cancel, /* () */0);
                } else {
                  return 0;
                }
              };
              var observer_onError = function (x) {
                if (!finished.contents && subscribed.contents) {
                  Curry._1(obs.onError, x);
                  return Curry._1(subscription.cancel, /* () */0);
                } else {
                  throw x;
                }
              };
              var observer_onNext = function (x) {
                if (!finished.contents && subscribed.contents) {
                  if (single.contents) {
                    Curry._1(obs.onError, Exceptions$Reaxon.IndexOutOfBounds);
                    return Curry._1(subscription.cancel, /* () */0);
                  } else {
                    single.contents = true;
                    last.contents = Caml_option.some(x);
                    return /* () */0;
                  }
                } else {
                  return 0;
                }
              };
              var observer = {
                onSubscribe: observer_onSubscribe,
                onComplete: observer_onComplete,
                onError: observer_onError,
                onNext: observer_onNext
              };
              Curry._1(obs.onSubscribe, subscription);
              return Curry._1(source.subscribeWith, observer);
            })
        };
}

exports.operator = operator;
/* No side effect */
