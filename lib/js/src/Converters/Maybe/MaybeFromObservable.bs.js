// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Exceptions$Reaxon = require("../../Exceptions.bs.js");

function operator(source) {
  return /* record */[/* subscribeWith */(function (obs) {
              var subscribed = /* record */[/* contents */false];
              var finished = /* record */[/* contents */false];
              var subRef = /* record */[/* contents */undefined];
              var subscription = /* record */[/* cancel */(function (param) {
                    if (finished[0]) {
                      return 0;
                    } else {
                      if (subscribed[0]) {
                        var match = subRef[0];
                        if (match !== undefined) {
                          Curry._1(match[/* cancel */0], /* () */0);
                        }
                        
                      }
                      finished[0] = true;
                      return /* () */0;
                    }
                  })];
              var last = /* record */[/* contents */undefined];
              var single = /* record */[/* contents */false];
              var observer_000 = function (sub) {
                if (finished[0] || subscribed[0]) {
                  return Curry._1(sub[/* cancel */0], /* () */0);
                } else {
                  subscribed[0] = true;
                  subRef[0] = sub;
                  return /* () */0;
                }
              };
              var observer_001 = function (param) {
                if (!finished[0] && subscribed[0]) {
                  if (single[0]) {
                    var match = last[0];
                    if (match !== undefined) {
                      Curry._1(obs[/* onSuccess */2], Caml_option.valFromOption(match));
                    } else {
                      Curry._1(obs[/* onComplete */1], /* () */0);
                    }
                  } else {
                    Curry._1(obs[/* onComplete */1], /* () */0);
                  }
                  return Curry._1(subscription[/* cancel */0], /* () */0);
                } else {
                  return 0;
                }
              };
              var observer_002 = function (x) {
                if (!finished[0] && subscribed[0]) {
                  Curry._1(obs[/* onError */3], x);
                  return Curry._1(subscription[/* cancel */0], /* () */0);
                } else {
                  throw x;
                }
              };
              var observer_003 = function (x) {
                if (!finished[0] && subscribed[0]) {
                  if (single[0]) {
                    Curry._1(obs[/* onError */3], Exceptions$Reaxon.IndexOutOfBounds);
                    return Curry._1(subscription[/* cancel */0], /* () */0);
                  } else {
                    single[0] = true;
                    last[0] = Caml_option.some(x);
                    return /* () */0;
                  }
                } else {
                  return 0;
                }
              };
              var observer = /* record */[
                observer_000,
                observer_001,
                observer_002,
                observer_003
              ];
              Curry._1(obs[/* onSubscribe */0], subscription);
              return Curry._1(source[/* subscribeWith */0], observer);
            })];
}

exports.operator = operator;
/* No side effect */
