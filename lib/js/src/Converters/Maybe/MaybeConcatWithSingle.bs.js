// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var DoubleSubscription$Reaxon = require("../../Utils/DoubleSubscription.bs.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedMaybeObserver$Reaxon = require("../../Observers/ProtectedMaybeObserver.bs.js");
var ProtectedSingleObserver$Reaxon = require("../../Observers/ProtectedSingleObserver.bs.js");

function operator(other, source) {
  return {
          subscribeWith: (function (param) {
              var onNext = param.onNext;
              var onError = param.onError;
              var onComplete = param.onComplete;
              var match = DoubleSubscription$Reaxon.make(/* () */0);
              var subscription = match[3];
              var right = match[2];
              var left = match[1];
              var alive = match[0];
              Curry._1(param.onSubscribe, subscription);
              var innerObserver = ProtectedSingleObserver$Reaxon.make({
                    onSubscribe: (function (sub) {
                        if (alive.contents) {
                          left.contents = sub;
                          return /* () */0;
                        } else {
                          return Curry._1(sub.cancel, /* () */0);
                        }
                      }),
                    onSuccess: (function (x) {
                        if (alive.contents) {
                          Curry._1(onNext, x);
                          Curry._1(onComplete, /* () */0);
                          return Curry._1(subscription.cancel, /* () */0);
                        } else {
                          return 0;
                        }
                      }),
                    onError: (function (x) {
                        if (alive.contents) {
                          Curry._1(onError, x);
                          return Curry._1(subscription.cancel, /* () */0);
                        } else {
                          throw x;
                        }
                      })
                  });
              return Curry._1(source.subscribeWith, ProtectedMaybeObserver$Reaxon.make({
                              onSubscribe: (function (sub) {
                                  if (alive.contents) {
                                    right.contents = sub;
                                    return /* () */0;
                                  } else {
                                    return Curry._1(sub.cancel, /* () */0);
                                  }
                                }),
                              onComplete: (function (param) {
                                  if (alive.contents) {
                                    Curry._1(other.subscribeWith, innerObserver);
                                    return OptionalSubscription$Reaxon.cancel(right.contents);
                                  } else {
                                    return 0;
                                  }
                                }),
                              onSuccess: (function (x) {
                                  if (alive.contents) {
                                    Curry._1(onNext, x);
                                    Curry._1(other.subscribeWith, innerObserver);
                                    return OptionalSubscription$Reaxon.cancel(right.contents);
                                  } else {
                                    return 0;
                                  }
                                }),
                              onError: (function (x) {
                                  if (alive.contents) {
                                    Curry._1(onError, x);
                                    return Curry._1(subscription.cancel, /* () */0);
                                  } else {
                                    throw x;
                                  }
                                })
                            }));
            })
        };
}

exports.operator = operator;
/* No side effect */
