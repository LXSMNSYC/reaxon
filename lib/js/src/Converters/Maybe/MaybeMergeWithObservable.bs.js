// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var SafeMaybeObserver$Reaxon = require("../../Observers/SafeMaybeObserver.bs.js");
var CompositeSubscription$Reaxon = require("../../Utils/CompositeSubscription.bs.js");
var SafeObservableObserver$Reaxon = require("../../Observers/SafeObservableObserver.bs.js");

function operator(other, source) {
  return /* record */[/* subscribeWith */(function (obs) {
              var composite = CompositeSubscription$Reaxon.make(/* () */0);
              var alive = composite[/* alive */2];
              var subscription = composite[/* subscription */0];
              var aFinished = /* record */[/* contents */false];
              var bFinished = /* record */[/* contents */false];
              Curry._1(obs[/* onSubscribe */0], subscription);
              Curry._1(source[/* subscribeWith */0], SafeMaybeObserver$Reaxon.make(/* record */[
                        /* onSubscribe */(function (sub) {
                            return Curry._1(composite[/* add */3], sub);
                          }),
                        /* onComplete */(function (param) {
                            if (Curry._1(alive, /* () */0)) {
                              aFinished[0] = true;
                              if (bFinished[0]) {
                                Curry._1(obs[/* onComplete */1], /* () */0);
                                return Curry._1(subscription[/* cancel */0], /* () */0);
                              } else {
                                return 0;
                              }
                            } else {
                              return 0;
                            }
                          }),
                        /* onSuccess */(function (x) {
                            if (Curry._1(alive, /* () */0)) {
                              aFinished[0] = true;
                              Curry._1(obs[/* onNext */3], x);
                              if (bFinished[0]) {
                                Curry._1(obs[/* onComplete */1], /* () */0);
                                return Curry._1(subscription[/* cancel */0], /* () */0);
                              } else {
                                return 0;
                              }
                            } else {
                              return 0;
                            }
                          }),
                        /* onError */(function (x) {
                            if (Curry._1(alive, /* () */0)) {
                              Curry._1(obs[/* onError */2], x);
                              return Curry._1(subscription[/* cancel */0], /* () */0);
                            } else {
                              throw x;
                            }
                          })
                      ]));
              return Curry._1(other[/* subscribeWith */0], SafeObservableObserver$Reaxon.make(/* record */[
                              /* onSubscribe */(function (sub) {
                                  return Curry._1(composite[/* add */3], sub);
                                }),
                              /* onComplete */(function (param) {
                                  if (Curry._1(alive, /* () */0)) {
                                    bFinished[0] = true;
                                    if (aFinished[0]) {
                                      Curry._1(obs[/* onComplete */1], /* () */0);
                                      return Curry._1(subscription[/* cancel */0], /* () */0);
                                    } else {
                                      return 0;
                                    }
                                  } else {
                                    return 0;
                                  }
                                }),
                              /* onError */(function (x) {
                                  if (Curry._1(alive, /* () */0)) {
                                    Curry._1(obs[/* onError */2], x);
                                    return Curry._1(subscription[/* cancel */0], /* () */0);
                                  } else {
                                    throw x;
                                  }
                                }),
                              /* onNext */(function (x) {
                                  if (Curry._1(alive, /* () */0)) {
                                    return Curry._1(obs[/* onNext */3], x);
                                  } else {
                                    return 0;
                                  }
                                })
                            ]));
            })];
}

exports.operator = operator;
/* No side effect */
