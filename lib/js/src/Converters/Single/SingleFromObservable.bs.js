// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Exceptions$Reaxon = require("../../Exceptions.bs.js");
var SafeSingleObserver$Reaxon = require("../../Observers/SafeSingleObserver.bs.js");

function operator(source) {
  return {
          subscribeWith: (function (obs) {
              var safe = SafeSingleObserver$Reaxon.make(obs);
              var last = {
                contents: undefined
              };
              var single = {
                contents: false
              };
              return Curry._1(source.subscribeWith, {
                          onSubscribe: (function (sub) {
                              return Curry._1(safe.onSubscribe, sub);
                            }),
                          onComplete: (function (param) {
                              if (single.contents) {
                                var match = last.contents;
                                if (match !== undefined) {
                                  return Curry._1(safe.onSuccess, Caml_option.valFromOption(match));
                                } else {
                                  return Curry._1(safe.onError, Exceptions$Reaxon.NoSuchElement);
                                }
                              } else {
                                return Curry._1(safe.onError, Exceptions$Reaxon.NoSuchElement);
                              }
                            }),
                          onError: (function (x) {
                              return Curry._1(safe.onError, x);
                            }),
                          onNext: (function (x) {
                              if (single.contents) {
                                return Curry._1(safe.onError, Exceptions$Reaxon.IndexOutOfBounds);
                              } else {
                                single.contents = true;
                                last.contents = Caml_option.some(x);
                                return /* () */0;
                              }
                            })
                        });
            })
        };
}

exports.operator = operator;
/* No side effect */
