// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var SafeSingleObserver$Reaxon = require("../../Observers/SafeSingleObserver.bs.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedMaybeObserver$Reaxon = require("../../Observers/ProtectedMaybeObserver.bs.js");

function operator(other, source) {
  return /* record */[/* subscribeWith */(function (obs) {
              var alive = /* record */[/* contents */true];
              var aFinished = /* record */[/* contents */false];
              var bFinished = /* record */[/* contents */false];
              var aRef = /* record */[/* contents */undefined];
              var bRef = /* record */[/* contents */undefined];
              var subscription = /* record */[/* cancel */(function (param) {
                    if (alive[0]) {
                      OptionalSubscription$Reaxon.cancel(aRef[0]);
                      OptionalSubscription$Reaxon.cancel(bRef[0]);
                      alive[0] = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })];
              Curry._1(obs[/* onSubscribe */0], subscription);
              Curry._1(source[/* subscribeWith */0], SafeSingleObserver$Reaxon.make(/* record */[
                        /* onSubscribe */(function (sub) {
                            if (alive[0]) {
                              aRef[0] = sub;
                              return /* () */0;
                            } else {
                              return Curry._1(sub[/* cancel */0], /* () */0);
                            }
                          }),
                        /* onSuccess */(function (x) {
                            if (alive[0]) {
                              aFinished[0] = true;
                              Curry._1(obs[/* onNext */3], x);
                              if (alive[0] && bFinished[0]) {
                                Curry._1(obs[/* onComplete */1], /* () */0);
                                return Curry._1(subscription[/* cancel */0], /* () */0);
                              } else {
                                return 0;
                              }
                            } else {
                              return 0;
                            }
                          }),
                        /* onError */(function (x) {
                            if (alive[0]) {
                              Curry._1(obs[/* onError */2], x);
                              return Curry._1(subscription[/* cancel */0], /* () */0);
                            } else {
                              throw x;
                            }
                          })
                      ]));
              return Curry._1(other[/* subscribeWith */0], ProtectedMaybeObserver$Reaxon.make(/* record */[
                              /* onSubscribe */(function (sub) {
                                  if (alive[0]) {
                                    bRef[0] = sub;
                                    return /* () */0;
                                  } else {
                                    return Curry._1(sub[/* cancel */0], /* () */0);
                                  }
                                }),
                              /* onComplete */(function (param) {
                                  if (alive[0]) {
                                    bFinished[0] = true;
                                    if (alive[0] && aFinished[0]) {
                                      Curry._1(obs[/* onComplete */1], /* () */0);
                                      return Curry._1(subscription[/* cancel */0], /* () */0);
                                    } else {
                                      return 0;
                                    }
                                  } else {
                                    return 0;
                                  }
                                }),
                              /* onSuccess */(function (x) {
                                  if (alive[0]) {
                                    bFinished[0] = true;
                                    Curry._1(obs[/* onNext */3], x);
                                    if (alive[0] && aFinished[0]) {
                                      Curry._1(obs[/* onComplete */1], /* () */0);
                                      return Curry._1(subscription[/* cancel */0], /* () */0);
                                    } else {
                                      return 0;
                                    }
                                  } else {
                                    return 0;
                                  }
                                }),
                              /* onError */(function (x) {
                                  if (alive[0]) {
                                    Curry._1(obs[/* onError */2], x);
                                    return Curry._1(subscription[/* cancel */0], /* () */0);
                                  } else {
                                    throw x;
                                  }
                                })
                            ]));
            })];
}

exports.operator = operator;
/* No side effect */
