// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var SafeSingleObserver$Reaxon = require("../../Observers/SafeSingleObserver.bs.js");
var CompositeSubscription$Reaxon = require("../../Utils/CompositeSubscription.bs.js");

function operator(sources) {
  return /* record */[/* subscribeWith */(function (obs) {
              var composite = CompositeSubscription$Reaxon.make(/* () */0);
              var alive = composite[/* alive */2];
              var subscription = composite[/* subscription */0];
              var index = /* record */[/* contents */List.length(sources)];
              Curry._1(obs[/* onSubscribe */0], subscription);
              return List.iter((function (source) {
                            return Curry._1(source[/* subscribeWith */0], SafeSingleObserver$Reaxon.make(/* record */[
                                            /* onSubscribe */(function (sub) {
                                                return Curry._1(composite[/* add */3], sub);
                                              }),
                                            /* onSuccess */(function (x) {
                                                if (Curry._1(alive, /* () */0)) {
                                                  index[0] = index[0] - 1 | 0;
                                                  Curry._1(obs[/* onNext */3], x);
                                                  if (index[0] === 0) {
                                                    Curry._1(obs[/* onComplete */1], /* () */0);
                                                    return Curry._1(subscription[/* cancel */0], /* () */0);
                                                  } else {
                                                    return 0;
                                                  }
                                                } else {
                                                  return 0;
                                                }
                                              }),
                                            /* onError */(function (x) {
                                                if (Curry._1(alive, /* () */0)) {
                                                  Curry._1(obs[/* onError */2], x);
                                                  return Curry._1(subscription[/* cancel */0], /* () */0);
                                                } else {
                                                  throw x;
                                                }
                                              })
                                          ]));
                          }), sources);
            })];
}

exports.operator = operator;
/* No side effect */
