// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedSingleObserver$Reaxon = require("../../Observers/ProtectedSingleObserver.bs.js");

function operator(sources) {
  return /* record */[/* subscribeWith */(function (obs) {
              var alive = /* record */[/* contents */true];
              var subRef = /* record */[/* contents */undefined];
              var subscription = /* record */[/* cancel */(function (param) {
                    if (alive[0]) {
                      OptionalSubscription$Reaxon.cancel(subRef[0]);
                      alive[0] = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })];
              var max = sources.length;
              var subscribe = function (index) {
                if (index >= max) {
                  Curry._1(obs[/* onComplete */1], /* () */0);
                  return Curry._1(subscription[/* cancel */0], /* () */0);
                } else {
                  subRef[0] = undefined;
                  return Curry._1(Caml_array.caml_array_get(sources, index)[/* subscribeWith */0], ProtectedSingleObserver$Reaxon.make(/* record */[
                                  /* onSubscribe */(function (sub) {
                                      if (alive[0]) {
                                        subRef[0] = sub;
                                        return /* () */0;
                                      } else {
                                        return Curry._1(sub[/* cancel */0], /* () */0);
                                      }
                                    }),
                                  /* onSuccess */(function (x) {
                                      if (alive[0]) {
                                        var oldRef = subRef[0];
                                        Curry._1(obs[/* onNext */3], x);
                                        subscribe(index + 1 | 0);
                                        return OptionalSubscription$Reaxon.cancel(oldRef);
                                      } else {
                                        return 0;
                                      }
                                    }),
                                  /* onError */(function (x) {
                                      if (alive[0]) {
                                        Curry._1(obs[/* onError */2], x);
                                        return Curry._1(subscription[/* cancel */0], /* () */0);
                                      } else {
                                        throw x;
                                      }
                                    })
                                ]));
                }
              };
              Curry._1(obs[/* onSubscribe */0], subscription);
              return subscribe(0);
            })];
}

exports.operator = operator;
/* No side effect */
