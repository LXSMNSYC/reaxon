// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedObservableObserver$Reaxon = require("../../Observers/ProtectedObservableObserver.bs.js");

function operator(other, combiner, source) {
  return /* record */[/* subscribeWith */(function (obs) {
              var alive = /* record */[/* contents */true];
              var sourceSub = /* record */[/* contents */undefined];
              var otherSub = /* record */[/* contents */undefined];
              var aValues = /* record */[/* contents : [] */0];
              var bValues = /* record */[/* contents : [] */0];
              var subscription = /* record */[/* cancel */(function (param) {
                    if (alive[0]) {
                      OptionalSubscription$Reaxon.cancel(sourceSub[0]);
                      OptionalSubscription$Reaxon.cancel(otherSub[0]);
                      alive[0] = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })];
              Curry._1(obs[/* onSubscribe */0], subscription);
              var combine = function (param) {
                var a = List.hd(aValues[0]);
                var b = List.hd(bValues[0]);
                aValues[0] = List.tl(aValues[0]);
                bValues[0] = List.tl(bValues[0]);
                var result;
                try {
                  result = Curry._2(combiner, a, b);
                }
                catch (raw_e){
                  var e = Caml_js_exceptions.internalToOCamlException(raw_e);
                  Curry._1(obs[/* onError */2], e);
                  return Curry._1(subscription[/* cancel */0], /* () */0);
                }
                return Curry._1(obs[/* onNext */3], result);
              };
              Curry._1(source[/* subscribeWith */0], ProtectedObservableObserver$Reaxon.make(/* record */[
                        /* onSubscribe */(function (sub) {
                            if (alive[0]) {
                              sourceSub[0] = sub;
                              return /* () */0;
                            } else {
                              return Curry._1(sub[/* cancel */0], /* () */0);
                            }
                          }),
                        /* onComplete */(function (param) {
                            if (alive[0]) {
                              Curry._1(obs[/* onComplete */1], /* () */0);
                              return Curry._1(subscription[/* cancel */0], /* () */0);
                            } else {
                              return 0;
                            }
                          }),
                        /* onError */(function (x) {
                            if (alive[0]) {
                              Curry._1(obs[/* onError */2], x);
                              return Curry._1(subscription[/* cancel */0], /* () */0);
                            } else {
                              throw x;
                            }
                          }),
                        /* onNext */(function (x) {
                            if (alive[0]) {
                              aValues[0] = Pervasives.$at(aValues[0], /* :: */[
                                    x,
                                    /* [] */0
                                  ]);
                              return combine(/* () */0);
                            } else {
                              return 0;
                            }
                          })
                      ]));
              return Curry._1(other[/* subscribeWith */0], ProtectedObservableObserver$Reaxon.make(/* record */[
                              /* onSubscribe */(function (sub) {
                                  if (alive[0]) {
                                    otherSub[0] = sub;
                                    return /* () */0;
                                  } else {
                                    return Curry._1(sub[/* cancel */0], /* () */0);
                                  }
                                }),
                              /* onComplete */(function (param) {
                                  if (alive[0]) {
                                    Curry._1(obs[/* onComplete */1], /* () */0);
                                    return Curry._1(subscription[/* cancel */0], /* () */0);
                                  } else {
                                    return 0;
                                  }
                                }),
                              /* onError */(function (x) {
                                  if (alive[0]) {
                                    Curry._1(obs[/* onError */2], x);
                                    return Curry._1(subscription[/* cancel */0], /* () */0);
                                  } else {
                                    throw x;
                                  }
                                }),
                              /* onNext */(function (x) {
                                  if (alive[0]) {
                                    bValues[0] = Pervasives.$at(bValues[0], /* :: */[
                                          x,
                                          /* [] */0
                                        ]);
                                    return combine(/* () */0);
                                  } else {
                                    return 0;
                                  }
                                })
                            ]));
            })];
}

exports.operator = operator;
/* No side effect */
