// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedObservableObserver$Reaxon = require("../../Observers/ProtectedObservableObserver.bs.js");

function operator(supplier, source) {
  return {
          subscribeWith: (function (obs) {
              var alive = {
                contents: true
              };
              var subRef = {
                contents: undefined
              };
              var subscription = {
                cancel: (function (param) {
                    if (alive.contents) {
                      OptionalSubscription$Reaxon.cancel(subRef.contents);
                      alive.contents = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })
              };
              var retries = {
                contents: -1
              };
              var retry = function (param) {
                subRef.contents = undefined;
                retries.contents = retries.contents + 1 | 0;
                return Curry._1(source.subscribeWith, ProtectedObservableObserver$Reaxon.make({
                                onSubscribe: (function (sub) {
                                    if (alive.contents) {
                                      subRef.contents = sub;
                                      return /* () */0;
                                    } else {
                                      return Curry._1(sub.cancel, /* () */0);
                                    }
                                  }),
                                onComplete: (function (param) {
                                    if (alive.contents) {
                                      Curry._1(obs.onComplete, /* () */0);
                                      return Curry._1(subscription.cancel, /* () */0);
                                    } else {
                                      return 0;
                                    }
                                  }),
                                onError: (function (x) {
                                    if (alive.contents) {
                                      var oldRef = subRef.contents;
                                      var exit = 0;
                                      var val;
                                      try {
                                        val = Curry._1(supplier, retries.contents);
                                        exit = 1;
                                      }
                                      catch (raw_e){
                                        var e = Caml_js_exceptions.internalToOCamlException(raw_e);
                                        Curry._1(obs.onError, e);
                                        Curry._1(subscription.cancel, /* () */0);
                                      }
                                      if (exit === 1) {
                                        if (val) {
                                          Curry._1(obs.onError, x);
                                          Curry._1(subscription.cancel, /* () */0);
                                        } else {
                                          retry(/* () */0);
                                        }
                                      }
                                      return OptionalSubscription$Reaxon.cancel(oldRef);
                                    } else {
                                      throw x;
                                    }
                                  }),
                                onNext: (function (x) {
                                    if (alive.contents) {
                                      return Curry._1(obs.onNext, x);
                                    } else {
                                      return 0;
                                    }
                                  })
                              }));
              };
              Curry._1(obs.onSubscribe, subscription);
              return retry(/* () */0);
            })
        };
}

exports.operator = operator;
/* No side effect */
