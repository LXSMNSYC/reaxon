// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedObservableObserver$Reaxon = require("../../Observers/ProtectedObservableObserver.bs.js");

function operator(source) {
  return /* record */[/* subscribeWith */(function (obs) {
              var alive = /* record */[/* contents */true];
              var subRef = /* record */[/* contents */undefined];
              var subscription = /* record */[/* cancel */(function (param) {
                    if (alive[0]) {
                      OptionalSubscription$Reaxon.cancel(subRef[0]);
                      alive[0] = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })];
              var retry = function (param) {
                subRef[0] = undefined;
                return Curry._1(source[/* subscribeWith */0], ProtectedObservableObserver$Reaxon.make(/* record */[
                                /* onSubscribe */(function (sub) {
                                    if (alive[0]) {
                                      subRef[0] = sub;
                                      return /* () */0;
                                    } else {
                                      return Curry._1(sub[/* cancel */0], /* () */0);
                                    }
                                  }),
                                /* onComplete */(function (param) {
                                    if (alive[0]) {
                                      Curry._1(obs[/* onComplete */1], /* () */0);
                                      return Curry._1(subscription[/* cancel */0], /* () */0);
                                    } else {
                                      return 0;
                                    }
                                  }),
                                /* onError */(function (x) {
                                    if (alive[0]) {
                                      var oldRef = subRef[0];
                                      retry(/* () */0);
                                      return OptionalSubscription$Reaxon.cancel(oldRef);
                                    } else {
                                      throw x;
                                    }
                                  }),
                                /* onNext */(function (x) {
                                    if (alive[0]) {
                                      return Curry._1(obs[/* onNext */3], x);
                                    } else {
                                      return 0;
                                    }
                                  })
                              ]));
              };
              Curry._1(obs[/* onSubscribe */0], subscription);
              return retry(/* () */0);
            })];
}

exports.operator = operator;
/* No side effect */
