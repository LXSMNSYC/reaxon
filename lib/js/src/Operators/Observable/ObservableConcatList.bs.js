// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedObservableObserver$Reaxon = require("../../Observers/ProtectedObservableObserver.bs.js");

function operator(sources) {
  return {
          subscribeWith: (function (obs) {
              var alive = {
                contents: true
              };
              var subRef = {
                contents: undefined
              };
              var subscription = {
                cancel: (function (param) {
                    if (alive.contents) {
                      OptionalSubscription$Reaxon.cancel(subRef.contents);
                      alive.contents = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })
              };
              var max = List.length(sources);
              var subscribe = function (index) {
                if (index >= max) {
                  Curry._1(obs.onComplete, /* () */0);
                  return Curry._1(subscription.cancel, /* () */0);
                } else {
                  subRef.contents = undefined;
                  return Curry._1(List.nth(sources, index).subscribeWith, ProtectedObservableObserver$Reaxon.make({
                                  onSubscribe: (function (sub) {
                                      if (alive.contents) {
                                        subRef.contents = sub;
                                        return /* () */0;
                                      } else {
                                        return Curry._1(sub.cancel, /* () */0);
                                      }
                                    }),
                                  onComplete: (function (param) {
                                      if (alive.contents) {
                                        var oldRef = subRef.contents;
                                        subscribe(index + 1 | 0);
                                        return OptionalSubscription$Reaxon.cancel(oldRef);
                                      } else {
                                        return 0;
                                      }
                                    }),
                                  onError: (function (x) {
                                      if (alive.contents) {
                                        Curry._1(obs.onError, x);
                                        return Curry._1(subscription.cancel, /* () */0);
                                      } else {
                                        throw x;
                                      }
                                    }),
                                  onNext: (function (x) {
                                      if (alive.contents) {
                                        return Curry._1(obs.onNext, x);
                                      } else {
                                        return 0;
                                      }
                                    })
                                }));
                }
              };
              Curry._1(obs.onSubscribe, subscription);
              return subscribe(0);
            })
        };
}

exports.operator = operator;
/* No side effect */
