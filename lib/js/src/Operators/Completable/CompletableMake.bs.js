// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedCompletableObserver$Reaxon = require("../../Observers/ProtectedCompletableObserver.bs.js");

function operator(onSubscribe) {
  return {
          subscribeWith: (function (obs) {
              var alive = {
                contents: true
              };
              var subRef = {
                contents: undefined
              };
              var subscription = {
                cancel: (function (param) {
                    if (alive.contents) {
                      OptionalSubscription$Reaxon.cancel(subRef.contents);
                      alive.contents = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })
              };
              var $$protected = ProtectedCompletableObserver$Reaxon.make(obs);
              var emitter_setSubscription = function (sub) {
                if (alive.contents) {
                  OptionalSubscription$Reaxon.cancel(subRef.contents);
                  subRef.contents = sub;
                  return /* () */0;
                } else {
                  return Curry._1(sub.cancel, /* () */0);
                }
              };
              var emitter_isCancelled = function (param) {
                return !alive.contents;
              };
              var emitter_onComplete = function (param) {
                if (alive.contents) {
                  Curry._1($$protected.onComplete, /* () */0);
                  return Curry._1(subscription.cancel, /* () */0);
                } else {
                  return 0;
                }
              };
              var emitter_onError = function (x) {
                if (alive.contents) {
                  Curry._1($$protected.onError, x);
                  return Curry._1(subscription.cancel, /* () */0);
                } else {
                  throw x;
                }
              };
              var emitter = {
                setSubscription: emitter_setSubscription,
                isCancelled: emitter_isCancelled,
                onComplete: emitter_onComplete,
                onError: emitter_onError
              };
              Curry._1($$protected.onSubscribe, subscription);
              try {
                return Curry._1(onSubscribe, emitter);
              }
              catch (raw_e){
                return Curry._1(emitter_onError, Caml_js_exceptions.internalToOCamlException(raw_e));
              }
            })
        };
}

exports.operator = operator;
/* No side effect */
