// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ProtectedCompletableObserver$Reaxon = require("../../Observers/ProtectedCompletableObserver.bs.js");

function operator(sources) {
  return /* record */[/* subscribeWith */(function (obs) {
              var alive = /* record */[/* contents */true];
              var subRef = /* record */[/* contents : [] */0];
              var subscription = /* record */[/* cancel */(function (param) {
                    if (alive[0]) {
                      List.iter((function (item) {
                              return Curry._1(item[/* cancel */0], /* () */0);
                            }), subRef[0]);
                      alive[0] = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })];
              return List.iter((function (source) {
                            return Curry._1(source[/* subscribeWith */0], ProtectedCompletableObserver$Reaxon.make(/* record */[
                                            /* onSubscribe */(function (sub) {
                                                if (alive[0]) {
                                                  subRef[0] = Pervasives.$at(/* :: */[
                                                        sub,
                                                        /* [] */0
                                                      ], subRef[0]);
                                                  return /* () */0;
                                                } else {
                                                  return Curry._1(sub[/* cancel */0], /* () */0);
                                                }
                                              }),
                                            /* onComplete */(function (param) {
                                                if (alive[0]) {
                                                  Curry._1(obs[/* onComplete */1], /* () */0);
                                                  return Curry._1(subscription[/* cancel */0], /* () */0);
                                                } else {
                                                  return 0;
                                                }
                                              }),
                                            /* onError */(function (x) {
                                                if (alive[0]) {
                                                  Curry._1(obs[/* onError */2], x);
                                                  return Curry._1(subscription[/* cancel */0], /* () */0);
                                                } else {
                                                  throw x;
                                                }
                                              })
                                          ]));
                          }), sources);
            })];
}

exports.operator = operator;
/* No side effect */
