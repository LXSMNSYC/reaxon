// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var EmptySubscription$Reaxon = require("../../Utils/EmptySubscription.bs.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var SafeCompletableObserver$Reaxon = require("../../Observers/SafeCompletableObserver.bs.js");

function operator(source) {
  var cached = /* record */[/* contents */false];
  var subscribed = /* record */[/* contents */false];
  var observers = /* record */[/* contents : [] */0];
  var signal = /* record */[/* contents */undefined];
  return /* record */[/* subscribeWith */(function (obs) {
              if (cached[0]) {
                var safe = SafeCompletableObserver$Reaxon.make(obs);
                Curry._1(safe[/* onSubscribe */0], EmptySubscription$Reaxon.instance);
                var match = signal[0];
                if (match !== undefined) {
                  var item = match;
                  if (item) {
                    return Curry._1(safe[/* onError */2], item[0]);
                  } else {
                    return Curry._1(safe[/* onComplete */1], /* () */0);
                  }
                } else {
                  return /* () */0;
                }
              } else {
                var alive = /* record */[/* contents */true];
                observers[0] = Pervasives.$at(/* :: */[
                      obs,
                      /* [] */0
                    ], observers[0]);
                var subscription = /* record */[/* cancel */(function (param) {
                      if (alive[0]) {
                        observers[0] = List.filter((function (x) {
                                  return Caml_obj.caml_equal(x, obs);
                                }))(observers[0]);
                        alive[0] = false;
                        return /* () */0;
                      } else {
                        return 0;
                      }
                    })];
                Curry._1(obs[/* onSubscribe */0], subscription);
                if (subscribed[0]) {
                  return 0;
                } else {
                  subscribed[0] = true;
                  var subRef = /* record */[/* contents */undefined];
                  return Curry._1(source[/* subscribeWith */0], SafeCompletableObserver$Reaxon.make(/* record */[
                                  /* onSubscribe */(function (sub) {
                                      subRef[0] = sub;
                                      return /* () */0;
                                    }),
                                  /* onComplete */(function (param) {
                                      if (cached[0]) {
                                        return 0;
                                      } else {
                                        cached[0] = true;
                                        signal[0] = /* OnComplete */0;
                                        List.iter((function (observer) {
                                                return Curry._1(observer[/* onComplete */1], /* () */0);
                                              }), observers[0]);
                                        return OptionalSubscription$Reaxon.cancel(subRef[0]);
                                      }
                                    }),
                                  /* onError */(function (x) {
                                      if (cached[0]) {
                                        return 0;
                                      } else {
                                        cached[0] = true;
                                        signal[0] = /* OnError */[x];
                                        List.iter((function (observer) {
                                                return Curry._1(observer[/* onError */2], x);
                                              }), observers[0]);
                                        return OptionalSubscription$Reaxon.cancel(subRef[0]);
                                      }
                                    })
                                ]));
                }
              }
            })];
}

exports.operator = operator;
/* No side effect */
