// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedCompletableObserver$Reaxon = require("../../Observers/ProtectedCompletableObserver.bs.js");

function operator(resumeIfError, source) {
  return /* record */[/* subscribeWith */(function (obs) {
              var alive = /* record */[/* contents */true];
              var outerSub = /* record */[/* contents */undefined];
              var innerSub = /* record */[/* contents */undefined];
              var subscription = /* record */[/* cancel */(function (param) {
                    if (alive[0]) {
                      OptionalSubscription$Reaxon.cancel(outerSub[0]);
                      OptionalSubscription$Reaxon.cancel(innerSub[0]);
                      alive[0] = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })];
              var innerObserver = ProtectedCompletableObserver$Reaxon.make(/* record */[
                    /* onSubscribe */(function (sub) {
                        if (alive[0]) {
                          innerSub[0] = sub;
                          return /* () */0;
                        } else {
                          return Curry._1(sub[/* cancel */0], /* () */0);
                        }
                      }),
                    /* onComplete */(function (param) {
                        if (alive[0]) {
                          Curry._1(obs[/* onComplete */1], /* () */0);
                          return Curry._1(subscription[/* cancel */0], /* () */0);
                        } else {
                          return 0;
                        }
                      }),
                    /* onError */(function (x) {
                        if (alive[0]) {
                          Curry._1(obs[/* onError */2], x);
                          return Curry._1(subscription[/* cancel */0], /* () */0);
                        } else {
                          throw x;
                        }
                      })
                  ]);
              return Curry._1(source[/* subscribeWith */0], ProtectedCompletableObserver$Reaxon.make(/* record */[
                              /* onSubscribe */(function (sub) {
                                  if (alive[0]) {
                                    outerSub[0] = sub;
                                    return Curry._1(obs[/* onSubscribe */0], subscription);
                                  } else {
                                    return Curry._1(sub[/* cancel */0], /* () */0);
                                  }
                                }),
                              /* onComplete */(function (param) {
                                  if (alive[0]) {
                                    Curry._1(obs[/* onComplete */1], /* () */0);
                                    return Curry._1(subscription[/* cancel */0], /* () */0);
                                  } else {
                                    return 0;
                                  }
                                }),
                              /* onError */(function (x) {
                                  if (alive[0]) {
                                    Curry._1(resumeIfError[/* subscribeWith */0], innerObserver);
                                    return OptionalSubscription$Reaxon.cancel(outerSub[0]);
                                  } else {
                                    throw x;
                                  }
                                })
                            ]));
            })];
}

exports.operator = operator;
/* No side effect */
