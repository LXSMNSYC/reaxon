// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedCompletableObserver$Reaxon = require("../../Observers/ProtectedCompletableObserver.bs.js");

function operator(supplier, source) {
  return /* record */[/* subscribeWith */(function (obs) {
              var alive = /* record */[/* contents */true];
              var subRef = /* record */[/* contents */undefined];
              var subscription = /* record */[/* cancel */(function (param) {
                    if (alive[0]) {
                      OptionalSubscription$Reaxon.cancel(subRef[0]);
                      alive[0] = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })];
              var retries = /* record */[/* contents */-1];
              var retry = function (param) {
                subRef[0] = undefined;
                retries[0] = retries[0] + 1 | 0;
                return Curry._1(source[/* subscribeWith */0], ProtectedCompletableObserver$Reaxon.make(/* record */[
                                /* onSubscribe */(function (sub) {
                                    if (alive[0]) {
                                      subRef[0] = sub;
                                      return /* () */0;
                                    } else {
                                      return Curry._1(sub[/* cancel */0], /* () */0);
                                    }
                                  }),
                                /* onComplete */(function (param) {
                                    if (alive[0]) {
                                      Curry._1(obs[/* onComplete */1], /* () */0);
                                      return Curry._1(subscription[/* cancel */0], /* () */0);
                                    } else {
                                      return 0;
                                    }
                                  }),
                                /* onError */(function (x) {
                                    if (alive[0]) {
                                      var oldRef = subRef[0];
                                      var exit = 0;
                                      var val;
                                      try {
                                        val = Curry._1(supplier, retries[0]);
                                        exit = 1;
                                      }
                                      catch (raw_e){
                                        var e = Caml_js_exceptions.internalToOCamlException(raw_e);
                                        Curry._1(obs[/* onError */2], e);
                                        Curry._1(subscription[/* cancel */0], /* () */0);
                                      }
                                      if (exit === 1) {
                                        if (val) {
                                          Curry._1(obs[/* onError */2], x);
                                          Curry._1(subscription[/* cancel */0], /* () */0);
                                        } else {
                                          retry(/* () */0);
                                        }
                                      }
                                      return OptionalSubscription$Reaxon.cancel(oldRef);
                                    } else {
                                      throw x;
                                    }
                                  })
                              ]));
              };
              Curry._1(obs[/* onSubscribe */0], subscription);
              return retry(/* () */0);
            })];
}

exports.operator = operator;
/* No side effect */
