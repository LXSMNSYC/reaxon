// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedSingleObserver$Reaxon = require("../../Observers/ProtectedSingleObserver.bs.js");

function operator(onSubscribe) {
  return /* record */[/* subscribeWith */(function (obs) {
              var alive = /* record */[/* contents */true];
              var subRef = /* record */[/* contents */undefined];
              var subscription = /* record */[/* cancel */(function (param) {
                    if (alive[0]) {
                      OptionalSubscription$Reaxon.cancel(subRef[0]);
                      alive[0] = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })];
              var $$protected = ProtectedSingleObserver$Reaxon.make(obs);
              var emitter_000 = function (sub) {
                if (alive[0]) {
                  OptionalSubscription$Reaxon.cancel(subRef[0]);
                  subRef[0] = sub;
                  return /* () */0;
                } else {
                  return Curry._1(sub[/* cancel */0], /* () */0);
                }
              };
              var emitter_001 = function (param) {
                return !alive[0];
              };
              var emitter_002 = function (x) {
                if (alive[0]) {
                  Curry._1($$protected[/* onSuccess */1], x);
                  return Curry._1(subscription[/* cancel */0], /* () */0);
                } else {
                  return 0;
                }
              };
              var emitter_003 = function (x) {
                if (alive[0]) {
                  Curry._1($$protected[/* onError */2], x);
                  return Curry._1(subscription[/* cancel */0], /* () */0);
                } else {
                  throw x;
                }
              };
              var emitter = /* record */[
                emitter_000,
                emitter_001,
                emitter_002,
                emitter_003
              ];
              Curry._1($$protected[/* onSubscribe */0], subscription);
              try {
                return Curry._1(onSubscribe, emitter);
              }
              catch (raw_e){
                return Curry._1(emitter_003, Caml_js_exceptions.internalToOCamlException(raw_e));
              }
            })];
}

exports.operator = operator;
/* No side effect */
