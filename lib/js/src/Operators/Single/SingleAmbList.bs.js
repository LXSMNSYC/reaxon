// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ProtectedSingleObserver$Reaxon = require("../../Observers/ProtectedSingleObserver.bs.js");

function operator(sources) {
  return {
          subscribeWith: (function (obs) {
              var alive = {
                contents: true
              };
              var subRef = {
                contents: /* [] */0
              };
              var subscription = {
                cancel: (function (param) {
                    if (alive.contents) {
                      List.iter((function (item) {
                              return Curry._1(item.cancel, /* () */0);
                            }), subRef.contents);
                      alive.contents = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })
              };
              return List.iter((function (source) {
                            return Curry._1(source.subscribeWith, ProtectedSingleObserver$Reaxon.make({
                                            onSubscribe: (function (sub) {
                                                if (alive.contents) {
                                                  subRef.contents = Pervasives.$at(/* :: */[
                                                        sub,
                                                        /* [] */0
                                                      ], subRef.contents);
                                                  return /* () */0;
                                                } else {
                                                  return Curry._1(sub.cancel, /* () */0);
                                                }
                                              }),
                                            onSuccess: (function (x) {
                                                if (alive.contents) {
                                                  Curry._1(obs.onSuccess, x);
                                                  return Curry._1(subscription.cancel, /* () */0);
                                                } else {
                                                  return 0;
                                                }
                                              }),
                                            onError: (function (x) {
                                                if (alive.contents) {
                                                  Curry._1(obs.onError, x);
                                                  return Curry._1(subscription.cancel, /* () */0);
                                                } else {
                                                  throw x;
                                                }
                                              })
                                          }));
                          }), sources);
            })
        };
}

exports.operator = operator;
/* No side effect */
