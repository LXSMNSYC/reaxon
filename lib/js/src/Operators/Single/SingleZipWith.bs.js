// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedSingleObserver$Reaxon = require("../../Observers/ProtectedSingleObserver.bs.js");

function operator(other, combiner, source) {
  return /* record */[/* subscribeWith */(function (obs) {
              var alive = /* record */[/* contents */true];
              var sourceSub = /* record */[/* contents */undefined];
              var otherSub = /* record */[/* contents */undefined];
              var aValue = /* record */[/* contents */undefined];
              var bValue = /* record */[/* contents */undefined];
              var subscription = /* record */[/* cancel */(function (param) {
                    if (alive[0]) {
                      OptionalSubscription$Reaxon.cancel(sourceSub[0]);
                      OptionalSubscription$Reaxon.cancel(otherSub[0]);
                      alive[0] = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })];
              Curry._1(obs[/* onSubscribe */0], subscription);
              var combine = function (a, b) {
                var exit = 0;
                var result;
                try {
                  result = Curry._2(combiner, a, b);
                  exit = 1;
                }
                catch (raw_e){
                  Curry._1(obs[/* onError */2], Caml_js_exceptions.internalToOCamlException(raw_e));
                }
                if (exit === 1) {
                  Curry._1(obs[/* onSuccess */1], result);
                }
                return Curry._1(subscription[/* cancel */0], /* () */0);
              };
              Curry._1(source[/* subscribeWith */0], ProtectedSingleObserver$Reaxon.make(/* record */[
                        /* onSubscribe */(function (sub) {
                            if (alive[0]) {
                              sourceSub[0] = sub;
                              return /* () */0;
                            } else {
                              return Curry._1(sub[/* cancel */0], /* () */0);
                            }
                          }),
                        /* onSuccess */(function (x) {
                            if (alive[0]) {
                              var match = bValue[0];
                              if (match !== undefined) {
                                return combine(x, Caml_option.valFromOption(match));
                              } else {
                                aValue[0] = Caml_option.some(x);
                                return /* () */0;
                              }
                            } else {
                              return 0;
                            }
                          }),
                        /* onError */(function (x) {
                            if (alive[0]) {
                              Curry._1(obs[/* onError */2], x);
                              return Curry._1(subscription[/* cancel */0], /* () */0);
                            } else {
                              throw x;
                            }
                          })
                      ]));
              return Curry._1(other[/* subscribeWith */0], ProtectedSingleObserver$Reaxon.make(/* record */[
                              /* onSubscribe */(function (sub) {
                                  if (alive[0]) {
                                    otherSub[0] = sub;
                                    return /* () */0;
                                  } else {
                                    return Curry._1(sub[/* cancel */0], /* () */0);
                                  }
                                }),
                              /* onSuccess */(function (x) {
                                  if (alive[0]) {
                                    var match = aValue[0];
                                    if (match !== undefined) {
                                      return combine(Caml_option.valFromOption(match), x);
                                    } else {
                                      bValue[0] = Caml_option.some(x);
                                      return /* () */0;
                                    }
                                  } else {
                                    return 0;
                                  }
                                }),
                              /* onError */(function (x) {
                                  if (alive[0]) {
                                    Curry._1(obs[/* onError */2], x);
                                    return Curry._1(subscription[/* cancel */0], /* () */0);
                                  } else {
                                    throw x;
                                  }
                                })
                            ]));
            })];
}

exports.operator = operator;
/* No side effect */
