// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedSingleObserver$Reaxon = require("../../Observers/ProtectedSingleObserver.bs.js");

function operator(scheduler, source) {
  return /* record */[/* subscribeWith */(function (obs) {
              var alive = /* record */[/* contents */true];
              var outerRef = /* record */[/* contents */undefined];
              var innerRef = /* record */[/* contents */undefined];
              var subscription = /* record */[/* cancel */(function (param) {
                    if (alive[0]) {
                      OptionalSubscription$Reaxon.cancel(outerRef[0]);
                      OptionalSubscription$Reaxon.cancel(innerRef[0]);
                      alive[0] = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })];
              return Curry._1(source[/* subscribeWith */0], ProtectedSingleObserver$Reaxon.make(/* record */[
                              /* onSubscribe */(function (sub) {
                                  if (alive[0]) {
                                    outerRef[0] = sub;
                                    return Curry._1(obs[/* onSubscribe */0], subscription);
                                  } else {
                                    return Curry._1(sub[/* cancel */0], /* () */0);
                                  }
                                }),
                              /* onSuccess */(function (x) {
                                  if (alive[0]) {
                                    innerRef[0] = Curry._1(scheduler[/* run */0], (function (param) {
                                            Curry._1(obs[/* onSuccess */1], x);
                                            return Curry._1(subscription[/* cancel */0], /* () */0);
                                          }));
                                    return OptionalSubscription$Reaxon.cancel(outerRef[0]);
                                  } else {
                                    return 0;
                                  }
                                }),
                              /* onError */(function (x) {
                                  if (alive[0]) {
                                    innerRef[0] = Curry._1(scheduler[/* run */0], (function (param) {
                                            Curry._1(obs[/* onError */2], x);
                                            return Curry._1(subscription[/* cancel */0], /* () */0);
                                          }));
                                    return OptionalSubscription$Reaxon.cancel(outerRef[0]);
                                  } else {
                                    throw x;
                                  }
                                })
                            ]));
            })];
}

exports.operator = operator;
/* No side effect */
