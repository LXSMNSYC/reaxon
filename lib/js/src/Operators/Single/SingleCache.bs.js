// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var EmptySubscription$Reaxon = require("../../Utils/EmptySubscription.bs.js");
var SafeSingleObserver$Reaxon = require("../../Observers/SafeSingleObserver.bs.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");

function operator(source) {
  var cached = {
    contents: false
  };
  var subscribed = {
    contents: false
  };
  var observers = {
    contents: /* [] */0
  };
  var signal = {
    contents: undefined
  };
  return {
          subscribeWith: (function (obs) {
              if (cached.contents) {
                var safe = SafeSingleObserver$Reaxon.make(obs);
                Curry._1(safe.onSubscribe, EmptySubscription$Reaxon.instance);
                var match = signal.contents;
                if (match !== undefined) {
                  var item = match;
                  if (item.tag) {
                    return Curry._1(safe.onError, item[0]);
                  } else {
                    return Curry._1(safe.onSuccess, item[0]);
                  }
                } else {
                  return /* () */0;
                }
              } else {
                var alive = {
                  contents: true
                };
                observers.contents = Pervasives.$at(/* :: */[
                      obs,
                      /* [] */0
                    ], observers.contents);
                var subscription = {
                  cancel: (function (param) {
                      if (alive.contents) {
                        observers.contents = List.filter((function (x) {
                                  return Caml_obj.caml_equal(x, obs);
                                }))(observers.contents);
                        alive.contents = false;
                        return /* () */0;
                      } else {
                        return 0;
                      }
                    })
                };
                Curry._1(obs.onSubscribe, subscription);
                if (subscribed.contents) {
                  return 0;
                } else {
                  subscribed.contents = true;
                  var subRef = {
                    contents: undefined
                  };
                  return Curry._1(source.subscribeWith, SafeSingleObserver$Reaxon.make({
                                  onSubscribe: (function (sub) {
                                      subRef.contents = sub;
                                      return /* () */0;
                                    }),
                                  onSuccess: (function (x) {
                                      if (cached.contents) {
                                        return 0;
                                      } else {
                                        cached.contents = true;
                                        signal.contents = /* OnSuccess */Block.__(0, [x]);
                                        List.iter((function (observer) {
                                                return Curry._1(observer.onSuccess, x);
                                              }), observers.contents);
                                        return OptionalSubscription$Reaxon.cancel(subRef.contents);
                                      }
                                    }),
                                  onError: (function (x) {
                                      if (cached.contents) {
                                        return 0;
                                      } else {
                                        cached.contents = true;
                                        signal.contents = /* OnError */Block.__(1, [x]);
                                        List.iter((function (observer) {
                                                return Curry._1(observer.onError, x);
                                              }), observers.contents);
                                        return OptionalSubscription$Reaxon.cancel(subRef.contents);
                                      }
                                    })
                                }));
                }
              }
            })
        };
}

exports.operator = operator;
/* No side effect */
