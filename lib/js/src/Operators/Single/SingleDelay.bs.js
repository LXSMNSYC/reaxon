// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var DoubleSubscription$Reaxon = require("../../Utils/DoubleSubscription.bs.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedSingleObserver$Reaxon = require("../../Observers/ProtectedSingleObserver.bs.js");

function operator(time, scheduler, source) {
  return {
          subscribeWith: (function (obs) {
              var match = DoubleSubscription$Reaxon.make(/* () */0);
              var subscription = match[3];
              var inner = match[2];
              var outer = match[1];
              var alive = match[0];
              Curry._1(obs.onSubscribe, subscription);
              return Curry._1(source.subscribeWith, ProtectedSingleObserver$Reaxon.make({
                              onSubscribe: (function (sub) {
                                  if (alive.contents) {
                                    outer.contents = sub;
                                    return /* () */0;
                                  } else {
                                    return Curry._1(sub.cancel, /* () */0);
                                  }
                                }),
                              onSuccess: (function (x) {
                                  if (alive.contents) {
                                    inner.contents = Curry._2(scheduler.timeout, (function (param) {
                                            Curry._1(obs.onSuccess, x);
                                            return Curry._1(subscription.cancel, /* () */0);
                                          }), time);
                                    return OptionalSubscription$Reaxon.cancel(outer.contents);
                                  } else {
                                    return 0;
                                  }
                                }),
                              onError: (function (x) {
                                  if (alive.contents) {
                                    inner.contents = Curry._2(scheduler.timeout, (function (param) {
                                            Curry._1(obs.onError, x);
                                            return Curry._1(subscription.cancel, /* () */0);
                                          }), time);
                                    return OptionalSubscription$Reaxon.cancel(outer.contents);
                                  } else {
                                    throw x;
                                  }
                                })
                            }));
            })
        };
}

exports.operator = operator;
/* No side effect */
