// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedMaybeObserver$Reaxon = require("../../Observers/ProtectedMaybeObserver.bs.js");

function operator(resumeIfError, source) {
  return {
          subscribeWith: (function (obs) {
              var alive = {
                contents: true
              };
              var outerSub = {
                contents: undefined
              };
              var innerSub = {
                contents: undefined
              };
              var subscription = {
                cancel: (function (param) {
                    if (alive.contents) {
                      OptionalSubscription$Reaxon.cancel(outerSub.contents);
                      OptionalSubscription$Reaxon.cancel(innerSub.contents);
                      alive.contents = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })
              };
              Curry._1(obs.onSubscribe, subscription);
              var innerObserver = ProtectedMaybeObserver$Reaxon.make({
                    onSubscribe: (function (sub) {
                        if (alive.contents) {
                          innerSub.contents = sub;
                          return /* () */0;
                        } else {
                          return Curry._1(sub.cancel, /* () */0);
                        }
                      }),
                    onComplete: (function (param) {
                        if (alive.contents) {
                          Curry._1(obs.onComplete, /* () */0);
                          return Curry._1(subscription.cancel, /* () */0);
                        } else {
                          return 0;
                        }
                      }),
                    onSuccess: (function (x) {
                        if (alive.contents) {
                          Curry._1(obs.onSuccess, x);
                          return Curry._1(subscription.cancel, /* () */0);
                        } else {
                          return 0;
                        }
                      }),
                    onError: (function (x) {
                        if (alive.contents) {
                          Curry._1(obs.onError, x);
                          return Curry._1(subscription.cancel, /* () */0);
                        } else {
                          throw x;
                        }
                      })
                  });
              return Curry._1(source.subscribeWith, ProtectedMaybeObserver$Reaxon.make({
                              onSubscribe: (function (sub) {
                                  if (alive.contents) {
                                    outerSub.contents = sub;
                                    return /* () */0;
                                  } else {
                                    return Curry._1(sub.cancel, /* () */0);
                                  }
                                }),
                              onComplete: (function (param) {
                                  if (alive.contents) {
                                    Curry._1(obs.onComplete, /* () */0);
                                    return Curry._1(subscription.cancel, /* () */0);
                                  } else {
                                    return 0;
                                  }
                                }),
                              onSuccess: (function (x) {
                                  if (alive.contents) {
                                    Curry._1(obs.onSuccess, x);
                                    return Curry._1(subscription.cancel, /* () */0);
                                  } else {
                                    return 0;
                                  }
                                }),
                              onError: (function (x) {
                                  if (alive.contents) {
                                    Curry._1(resumeIfError.subscribeWith, innerObserver);
                                    return OptionalSubscription$Reaxon.cancel(outerSub.contents);
                                  } else {
                                    throw x;
                                  }
                                })
                            }));
            })
        };
}

exports.operator = operator;
/* No side effect */
