// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var OptionalSubscription$Reaxon = require("../../Utils/OptionalSubscription.bs.js");
var ProtectedMaybeObserver$Reaxon = require("../../Observers/ProtectedMaybeObserver.bs.js");

function operator(scheduler, source) {
  return /* record */[/* subscribeWith */(function (obs) {
              var alive = /* record */[/* contents */true];
              var sourceSub = /* record */[/* contents */undefined];
              var schedSub = /* record */[/* contents */undefined];
              var subscription = /* record */[/* cancel */(function (param) {
                    if (alive[0]) {
                      OptionalSubscription$Reaxon.cancel(sourceSub[0]);
                      OptionalSubscription$Reaxon.cancel(schedSub[0]);
                      alive[0] = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  })];
              Curry._1(obs[/* onSubscribe */0], subscription);
              schedSub[0] = Curry._1(scheduler[/* run */0], (function (param) {
                      schedSub[0] = undefined;
                      return Curry._1(source[/* subscribeWith */0], ProtectedMaybeObserver$Reaxon.make(/* record */[
                                      /* onSubscribe */(function (sub) {
                                          if (alive[0]) {
                                            sourceSub[0] = sub;
                                            return /* () */0;
                                          } else {
                                            return Curry._1(sub[/* cancel */0], /* () */0);
                                          }
                                        }),
                                      /* onComplete */(function (param) {
                                          if (alive[0]) {
                                            Curry._1(obs[/* onComplete */1], /* () */0);
                                            return Curry._1(subscription[/* cancel */0], /* () */0);
                                          } else {
                                            return 0;
                                          }
                                        }),
                                      /* onSuccess */(function (x) {
                                          if (alive[0]) {
                                            Curry._1(obs[/* onSuccess */2], x);
                                            return Curry._1(subscription[/* cancel */0], /* () */0);
                                          } else {
                                            return 0;
                                          }
                                        }),
                                      /* onError */(function (x) {
                                          if (alive[0]) {
                                            Curry._1(obs[/* onError */3], x);
                                            return Curry._1(subscription[/* cancel */0], /* () */0);
                                          } else {
                                            return 0;
                                          }
                                        })
                                    ]));
                    }));
              return /* () */0;
            })];
}

exports.operator = operator;
/* No side effect */
